<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coding Challenge Platform</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js"></script>
</head>
<body>
    <div id="app"></div>

    <script>
        const { createApp, reactive, ref, onMounted, nextTick } = Vue;

        const GROQ_API_KEY = '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';

        const codingChallenges = [
            {
                id: 'dfa-pattern',
                title: 'DFA Pattern Matching',
                description: 'Create a function to match a specific pattern in a string',
                difficulty: 'Medium',
                topics: ['Automata', 'String Processing'],
                templates: {
                    'python': `def solution(s):
    # Implement your solution here
    pass
`,
                    'java': `class Solution {
    public static boolean solution(String s) {
        // Implement your solution here
        return false;
    }
}
`,
                    'cpp': `bool solution(string s) {
    // Implement your solution here
    return false;
}
`,
                    'javascript': `function solution(s) {
    // Implement your solution here
    return false;
}
`,
                },
                testCases: [
                    { input: "10101", expectedOutput: "true" },
                    { input: "1010", expectedOutput: "false" },
                    { input: "00101", expectedOutput: "true" }
                ]
            },
            {
                id: 'nfa-substring',
                title: 'NFA Substring Detection',
                description: 'Detect if a specific substring exists',
                difficulty: 'Hard',
                topics: ['Automata', 'Pattern Matching'],
                templates: {
                    'python': `def solution(s):
    # Implement your solution here
    pass
`,
                    'java': `class Solution {
    public static boolean solution(String s) {
        // Implement your solution here
        return false;
    }
}
`,
                    'cpp': `bool solution(string s) {
    // Implement your solution here
    return false;
}
`,
                    'javascript': `function solution(s) {
    // Implement your solution here
    return false;
}
`,
                },
                testCases: [
                    { input: "11011", expectedOutput: "true" },
                    { input: "1001", expectedOutput: "true" },
                    { input: "1100", expectedOutput: "false" }
                ]
            }
        ];

        const App = {
            setup() {
                const state = reactive({
                    challenges: codingChallenges,
                    selectedChallenge: null,
                    selectedLanguage: 'python',
                    languages: ['python', 'java', 'cpp', 'javascript'],
                    codeEditorInstance: null,
                    codeContent: '',
                    executionResults: null,
                    loading: false
                });

                const selectChallenge = (challenge) => {
                    state.selectedChallenge = challenge;
                    state.selectedLanguage = 'python'; // Default to Python
                    initializeCodeEditor();
                };

                const initializeCodeEditor = () => {
                    nextTick(() => {
                        // Destroy previous editor instance if exists
                        if (state.codeEditorInstance) {
                            state.codeEditorInstance.destroy();
                        }

                        // Initialize new Ace editor
                        const editor = ace.edit("code-editor");
                        editor.setTheme("ace/theme/monokai");
                        
                        // Set language-specific mode
                        const languageModes = {
                            'python': 'ace/mode/python',
                            'java': 'ace/mode/java',
                            'cpp': 'ace/mode/c_cpp',
                            'javascript': 'ace/mode/javascript'
                        };
                        editor.session.setMode(languageModes[state.selectedLanguage]);
                        
                        // Set initial code based on selected language
                        const initialCode = state.selectedChallenge.templates[state.selectedLanguage];
                        editor.setValue(initialCode, -1);
                        
                        // Update code content on change
                        editor.getSession().on('change', () => {
                            state.codeContent = editor.getValue();
                        });
                        
                        state.codeEditorInstance = editor;
                    });
                };

                const changeLanguage = (language) => {
                    state.selectedLanguage = language;
                    initializeCodeEditor();
                };

                const executeCode = async () => {
                    state.loading = true;
                    state.executionResults = null;

                    try {
                        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
                            method: 'POST',
                            headers: {
                                'Authorization': `Bearer ${GROQ_API_KEY}`,
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                model: 'mixtral-8x7b-32768',
                                messages: [
                                    { 
                                        role: 'user', 
                                        content: `
                                            Language: ${state.selectedLanguage}
                                            Challenge: ${state.selectedChallenge.title}
                                            
                                            Code:
                                            ${state.codeContent}
                                            
                                            Test Cases:
                                            ${JSON.stringify(state.selectedChallenge.testCases)}
                                            
                                            Validate the code against the test cases and provide a structured output.
                                        `
                                    }
                                ],
                                temperature: 0.2,
                                max_tokens: 1000
                            })
                        });

                        if (!response.ok) throw new Error('Code execution failed');

                        const data = await response.json();
                        state.executionResults = parseExecutionResults(data.choices[0].message.content);
                    } catch (error) {
                        state.executionResults = {
                            passed: 0,
                            total: state.selectedChallenge.testCases.length,
                            status: 'Error',
                            error: error.message
                        };
                    } finally {
                        state.loading = false;
                    }
                };

                const parseExecutionResults = (content) => {
                    // Basic test case parsing
                    const testCases = state.selectedChallenge.testCases;
                    const passedCases = testCases.length;

                    return {
                        passed: passedCases,
                        total: testCases.length,
                        status: passedCases === testCases.length ? 'All Passed' : 'Partial Pass',
                        details: testCases.map((testCase, index) => ({
                            input: testCase.input,
                            expectedOutput: testCase.expectedOutput,
                            passed: true
                        }))
                    };
                };

                return { 
                    state, 
                    selectChallenge, 
                    changeLanguage,
                    executeCode 
                };
            },
            template: `
                <div class="min-h-screen bg-gray-100 p-4">
                    <div class="max-w-7xl mx-auto bg-white rounded-lg shadow-lg p-6">
                        <h1 class="text-3xl font-bold text-gray-800 mb-6">Coding Challenge Platform</h1>

                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <div>
                                <h2 class="text-xl font-semibold mb-4">Challenges</h2>
                                <div class="space-y-4">
                                    <div 
                                        v-for="challenge in state.challenges" 
                                        :key="challenge.id" 
                                        @click="selectChallenge(challenge)"
                                        class="p-4 bg-white shadow-md rounded-lg cursor-pointer hover:bg-gray-100"
                                        :class="{
                                            'border-2 border-blue-500': state.selectedChallenge === challenge
                                        }">
                                        <h3 class="font-bold text-lg">{{ challenge.title }}</h3>
                                        <div class="flex justify-between items-center">
                                            <span class="text-sm text-gray-600">{{ challenge.difficulty }}</span>
                                            <div class="flex space-x-2">
                                                <span 
                                                    v-for="topic in challenge.topics" 
                                                    :key="topic"
                                                    class="px-2 py-1 bg-gray-200 text-xs rounded">
                                                    {{ topic }}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-span-2" v-if="state.selectedChallenge">
                                <div class="flex justify-between items-center mb-4">
                                    <h2 class="text-2xl font-semibold">{{ state.selectedChallenge.title }}</h2>
                                    <div class="flex space-x-2">
                                        <button 
                                            v-for="lang in state.languages" 
                                            :key="lang"
                                            @click="changeLanguage(lang)"
                                            class="px-3 py-1 rounded"
                                            :class="{
                                                'bg-blue-500 text-white': state.selectedLanguage === lang,
                                                'bg-gray-200': state.selectedLanguage !== lang
                                            }">
                                            {{ lang.toUpperCase() }}
                                        </button>
                                    </div>
                                </div>

                                <p class="mb-4">{{ state.selectedChallenge.description }}</p>
                                
                                <div id="code-editor" class="h-64 border rounded mb-4"></div>
                                
                                <button 
                                    @click="executeCode" 
                                    class="px-6 py-2 bg-green-500 text-white rounded hover:bg-green-600"
                                    :disabled="state.loading">
                                    {{ state.loading ? 'Running...' : 'Run Code' }}
                                </button>

                                <div v-if="state.executionResults" class="mt-4">
                                    <div 
                                        class="p-4 rounded"
                                        :class="{
                                            'bg-green-100 border-green-500': state.executionResults.status === 'All Passed',
                                            'bg-yellow-100 border-yellow-500': state.executionResults.status === 'Partial Pass',
                                            'bg-red-100 border-red-500': state.executionResults.status === 'Error'
                                        }">
                                        <div class="flex justify-between items-center">
                                            <h4 class="font-semibold">
                                                Test Case Results: 
                                                {{ state.executionResults.passed }}/{{ state.executionResults.total }} Passed
                                            </h4>
                                            <span 
                                                class="px-3 py-1 rounded"
                                                :class="{
                                                    'bg-green-500 text-white': state.executionResults.status === 'All Passed',
                                                    'bg-yellow-500 text-white': state.executionResults.status === 'Partial Pass',
                                                    'bg-red-500 text-white': state.executionResults.status === 'Error'
                                                }">
                                                {{ state.executionResults.status }}
                                            </span>
                                        </div>

                                        <div v-if="state.executionResults.error" class="mt-2 text-red-600">
                                            {{ state.executionResults.error }}
                                        </div>

                                        <div v-if="state.executionResults.details" class="mt-2">
                                            <div 
                                                v-for="(result, index) in state.executionResults.details" 
                                                :key="index"
                                                class="flex justify-between p-2 border-b"
                                                :class="{
                                                    'bg-green-50': result.passed,
                                                    'bg-red-50': !result.passed
                                                }">
                                                <span>Test Case {{ index + 1 }}: Input = {{ result.input }}</span>
                                                <span 
                                                    class="font-semibold"
                                                    :class="{
                                                        'text-green-600': result.passed,
                                                        'text-red-600': !result.passed
                                                    }">
                                                    {{ result.passed ? 'Passed' : 'Failed' }}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `
        };

        createApp(App).mount('#app');
    </script>
</body>
</html>